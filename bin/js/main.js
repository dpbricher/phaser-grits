// Generated by CoffeeScript 1.8.0
require(["lib/phaser.min"], function() {
  var PLAYER_SPEED, RELOAD_TIME, cursors, game, groupProj, lastFireTime, moveKeys, player, tileLayer, tileMap;
  PLAYER_SPEED = 500;
  RELOAD_TIME = 0.2;
  tileMap = null;
  tileLayer = null;
  groupProj = null;
  player = null;
  lastFireTime = 0;
  moveKeys = null;
  cursors = null;
  return game = new Phaser.Game(800, 600, Phaser.AUTO, "content-main", {
    preload: function() {
      game.load.tilemap("map", "data/map1.json", null, Phaser.Tilemap.TILED_JSON);
      game.load.image("map_tiles", "images/grits_master.png");
      return game.load.atlas("anims", "images/grits_effects.png", "data/grits_effects.json", null, Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);
    },
    create: function() {
      var keyboard;
      game.physics.startSystem(Phaser.Physics.ARCADE);
      tileMap = game.add.tilemap("map");
      tileMap.addTilesetImage("grits_master", "map_tiles");
      tileLayer = tileMap.createLayer("floor");
      tileLayer.resizeWorld();
      tileMap.createLayer("floor_blend");
      tileMap.createLayer("walls");
      groupProj = game.add.group();
      player = game.add.sprite(1220, 1220, "anims");
      player.animations.add("walk_anim", Phaser.Animation.generateFrameNames("walk_down_", 0, 29, ".png", 4), 25, true);
      player.animations.play("walk_anim").stop();
      game.physics.arcade.enable(player);
      player.body.collideWorldBounds = true;
      lastFireTime = game.time.totalElapsedSeconds();
      keyboard = game.input.keyboard;
      cursors = keyboard.createCursorKeys();
      moveKeys = {
        up: keyboard.addKey(Phaser.Keyboard.W),
        down: keyboard.addKey(Phaser.Keyboard.S),
        left: keyboard.addKey(Phaser.Keyboard.A),
        right: keyboard.addKey(Phaser.Keyboard.D)
      };
      return game.camera.follow(player);
    },
    update: function() {
      var bullet, velocity;
      velocity = player.body.velocity.set(0, 0);
      if (moveKeys.right.isDown) {
        velocity.x += 1;
      }
      if (moveKeys.left.isDown) {
        velocity.x -= 1;
      }
      if (moveKeys.up.isDown) {
        velocity.y -= 1;
      }
      if (moveKeys.down.isDown) {
        velocity.y += 1;
      }
      velocity.normalize().multiply(PLAYER_SPEED, PLAYER_SPEED);
      velocity = new Phaser.Point();
      if (cursors.right.isDown) {
        velocity.x += 1;
      }
      if (cursors.left.isDown) {
        velocity.x -= 1;
      }
      if (cursors.up.isDown) {
        velocity.y -= 1;
      }
      if (cursors.down.isDown) {
        velocity.y += 1;
      }
      if (!velocity.isZero() && game.time.totalElapsedSeconds() - lastFireTime >= RELOAD_TIME) {
        bullet = groupProj.create(player.body.position.x, player.body.position.y, "anims");
        bullet.animations.add("bullet", Phaser.Animation.generateFrameNames("machinegun_projectile_", 0, 7, ".png", 4), 25, true);
        bullet.animations.play("bullet");
        game.physics.arcade.enable(bullet);
        velocity.normalize();
        bullet.rotation = velocity.angle(new Phaser.Point(0, 0));
        bullet.body.velocity = velocity.multiply(PLAYER_SPEED, PLAYER_SPEED);
        return lastFireTime = game.time.totalElapsedSeconds();
      }
    }
  });
});
