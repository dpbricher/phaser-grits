// Generated by CoffeeScript 1.8.0
var Main;

Main = function() {
  var PLAYER_SPEED, cursors, game, player, tileLayer, tileMap;
  PLAYER_SPEED = 1000;
  tileMap = null;
  tileLayer = null;
  player = null;
  cursors = null;
  return game = new Phaser.Game(800, 600, Phaser.AUTO, "content-main", {
    preload: function() {
      game.load.tilemap("map", "data/map1.json", null, Phaser.Tilemap.TILED_JSON);
      game.load.image("map_tiles", "images/grits_master.png");
      return game.load.atlas("anims", "images/grits_effects.png", "data/grits_effects.json", null, Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);
    },
    create: function() {
      game.physics.startSystem(Phaser.Physics.ARCADE);
      tileMap = game.add.tilemap("map");
      tileMap.addTilesetImage("grits_master", "map_tiles");
      tileLayer = tileMap.createLayer("floor");
      tileLayer.resizeWorld();
      tileMap.createLayer("floor_blend");
      tileMap.createLayer("walls");
      tileMap.createLayer("lights");
      tileMap.createLayer("decor_02");
      player = game.add.sprite(0, 0, "anims");
      player.animations.add("walk_anim", Phaser.Animation.generateFrameNames("walk_down_", 0, 29, ".png", 4), 25, true);
      player.animations.play("walk_anim").stop();
      game.physics.arcade.enable(player);
      player.body.collideWorldBounds = true;
      cursors = game.input.keyboard.createCursorKeys();
      return game.camera.follow(player);
    },
    update: function() {
      var velocity;
      velocity = player.body.velocity.set(0, 0);
      if (cursors.right.isDown) {
        velocity.x += 1;
      }
      if (cursors.left.isDown) {
        velocity.x -= 1;
      }
      if (cursors.up.isDown) {
        velocity.y -= 1;
      }
      if (cursors.down.isDown) {
        velocity.y += 1;
      }
      return velocity.normalize().multiply(PLAYER_SPEED, PLAYER_SPEED);
    }
  });
};
